"""
Flow Prefect pour orchestrer les transformations dbt

Ce module d√©finit les t√¢ches et flows pour ex√©cuter dbt via Prefect.
Il utilise le fichier profiles.yml local (dbt/profiles.yml) g√©n√©r√© par 
infrastructure/setup_profiles/flows.py.

Pour g√©n√©rer profiles.yml :
    uv run python -m infrastructure.setup_profiles --local-only
"""
from prefect import flow, task, get_run_logger
from prefect_dbt.cli.commands import DbtCoreOperation
from pathlib import Path


@task(name="dbt-run", retries=2, retry_delay_seconds=30)
def run_dbt_models(target: str = "dev"):
    """
    Ex√©cute les transformations dbt (dbt run)
    
    Cette t√¢che construit tous les mod√®les d√©finis dans le projet dbt.
    Les retries permettent de g√©rer les erreurs temporaires de connexion.
    
    IMPORTANT: Cette t√¢che utilise le profiles.yml local (dbt/profiles.yml).
    Assurez-vous de le g√©n√©rer avec: uv run python -m infrastructure.setup_profiles --local-only
    
    Args:
        target: Environnement cible (dev ou prod). Correspond au target dans profiles.yml
    
    Returns:
        R√©sultat de l'ex√©cution dbt
    """
    logger = get_run_logger()
    project_dir = Path(__file__).parent.parent / "dbt"
    profiles_dir = project_dir
    
    logger.info(f"üöÄ Ex√©cution de dbt run sur l'environnement: {target}")
    logger.info(f"üìÅ R√©pertoire du projet: {project_dir}")
    logger.info(f"üìã Fichier de profils: {profiles_dir / 'profiles.yml'}")
    
    # V√©rifie que profiles.yml existe
    if not (profiles_dir / "profiles.yml").exists():
        logger.error("‚ùå Le fichier profiles.yml n'existe pas!")
        logger.error("G√©n√©rez-le avec: uv run python -m infrastructure.setup_profiles --local-only")
        raise FileNotFoundError(
            f"Le fichier {profiles_dir / 'profiles.yml'} n'existe pas. "
            f"Ex√©cutez: uv run python -m infrastructure.setup_profiles --local-only"
        )

    # Ex√©cute dbt run en utilisant le profiles.yml local
    result = DbtCoreOperation(
        commands=[f"dbt run --target {target}"],
        project_dir=str(project_dir),
        profiles_dir=str(profiles_dir),
        overwrite_profiles=False,
    ).run()
    
    logger.info(f"‚úÖ dbt run termin√© avec succ√®s sur {target}")
    return result


@task(name="dbt-test", retries=1)
def test_dbt_models(target: str = "dev"):
    """
    Teste les mod√®les dbt (dbt test)
    
    V√©rifie que les contraintes de qualit√© des donn√©es sont respect√©es
    (unicit√©, non-nullit√©, relations, etc.)
    
    IMPORTANT: Cette t√¢che utilise le profiles.yml local (dbt/profiles.yml).
    
    Args:
        target: Environnement cible (dev ou prod). Correspond au target dans profiles.yml
    
    Returns:
        R√©sultat des tests dbt
    """
    logger = get_run_logger()
    project_dir = Path(__file__).parent.parent / "dbt"
    profiles_dir = project_dir
    
    logger.info(f"üß™ Ex√©cution de dbt test sur l'environnement: {target}")
    logger.info(f"üìÅ R√©pertoire du projet: {project_dir}")
    
    # V√©rifie que profiles.yml existe
    if not (profiles_dir / "profiles.yml").exists():
        logger.error("‚ùå Le fichier profiles.yml n'existe pas!")
        raise FileNotFoundError(
            f"Le fichier {profiles_dir / 'profiles.yml'} n'existe pas. "
            f"Ex√©cutez: uv run python -m infrastructure.setup_profiles --local-only"
        )
    
    # Ex√©cute dbt test en utilisant le profiles.yml local
    result = DbtCoreOperation(
        commands=[f"dbt test --target {target}"],
        project_dir=str(project_dir),
        profiles_dir=str(profiles_dir),
        overwrite_profiles=False,
    ).run()
    
    logger.info(f"‚úÖ dbt test termin√© avec succ√®s sur {target}")
    return result


@flow(name="pipeline-dbt-complet", log_prints=True)
def dbt_full_pipeline(target: str = "dev"):
    """
    Pipeline compl√®te dbt : run + test
    
    Cette pipeline orchestre l'ex√©cution compl√®te de dbt en utilisant les blocs
    Prefect configur√©s par infrastructure/setup_profiles/flows.py.
    
    Args:
        target: Environnement cible (dev ou prod). Par d√©faut "dev".
                - dev : utilise le bloc 'dbt-cli-profile-dev' (dataset dev, 1 thread)
                - prod : utilise le bloc 'dbt-cli-profile-prod' (dataset prod, 4 threads)
    
    Returns:
        Dict contenant les r√©sultats de run et test
    
    Exemples d'utilisation:
        
        En local (environnement dev):
            python prefect_flows/pipeline.py
            
        En local (environnement prod):
            python prefect_flows/pipeline.py --target prod
        
        Avec Prefect Cloud:
            prefect deployment build prefect_flows/pipeline.py:dbt_full_pipeline -n "dbt-dev" -p default-pool
            prefect deployment apply dbt_full_pipeline-deployment.yaml
            prefect deployment run pipeline-dbt-complet/dbt-dev --param target=dev
    """
    logger = get_run_logger()
    
    logger.info(f"üöÄ D√©marrage de la pipeline dbt compl√®te (environnement: {target})...")
    
    # 1. Ex√©cute les transformations dbt
    logger.info("üìä √âtape 1/2 : Ex√©cution des mod√®les dbt (dbt run)...")
    run_result = run_dbt_models(target=target)
    logger.info(f"‚úÖ Mod√®les dbt ex√©cut√©s avec succ√®s sur l'environnement {target}")
    
    # 2. Teste les mod√®les (seulement si run a r√©ussi)
    logger.info("üß™ √âtape 2/2 : Test des mod√®les dbt (dbt test)...")
    test_result = test_dbt_models(target=target)
    logger.info(f"‚úÖ Tests dbt pass√©s avec succ√®s sur l'environnement {target}")
    
    logger.info(f"üéâ Pipeline termin√©e avec succ√®s sur l'environnement {target}!")
    
    return {
        "target": target,
        "run": run_result,
        "test": test_result,
    }


if __name__ == "__main__":
    """
    Point d'entr√©e pour l'ex√©cution locale.
    
    Usage:
        # Environnement dev (par d√©faut)
        uv run python prefect_flows/pipeline.py
        
        # Pour prod, modifiez l'appel ci-dessous ou utilisez Prefect CLI
    """
    # Ex√©cution locale pour tester (environnement dev par d√©faut)
    dbt_full_pipeline(target="dev")

